"""
Django settings for example_project project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1s8dxxuke%+%k!u^6q9k=+g4i+us4x($q$+o_!6&-$7rh26_$5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django_admin_logs_viewer', # Added
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'example_project',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'example_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_admin_logs_viewer.context_processors.logs_url', # Added
            ],
        },
    },
]

WSGI_APPLICATION = 'example_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


###################### LOGGING ######################

LOGS_SAVE_PATH = Path(BASE_DIR) / 'logs'
(LOGS_SAVE_PATH / 'commands').mkdir(parents=True, exist_ok=True)
(LOGS_SAVE_PATH / 'other').mkdir(parents=True, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": '{{ "level": "{levelname}", "datetime": "{asctime}", "source": "{name}", "file": "{filename}:{lineno}", "message": "{message}" }}',
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {filename} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file_commands": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOGS_SAVE_PATH / 'commands' / 'logfile_commands.log',
            "when": "midnight",
            "interval": 1,
            "delay": True,
            "formatter": "verbose",
        },
        "file_other": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOGS_SAVE_PATH / 'other' / 'logfile_other.log',
            "when": "midnight",
            "interval": 1,
            "delay": True,
            "formatter": "verbose",
        },
    },
    "loggers": {
        "example_project.management.commands": {
            "level": "DEBUG",
            "handlers": ["file_commands", "console"],
            "propagate": False,
        },
        "": {
            "level": "DEBUG",
            "handlers": ["file_other", "console"],
            "propagate": False,
        },
    }
}

import os
from django_admin_logs_viewer.views.parser import LOGS_PREDEFINED_REGEXES

LOGS_DIRS = [
    {
        "path": os.path.join(BASE_DIR, "logs"),
        "parser": "json-parser",
    },
    {
        "path": os.path.join(BASE_DIR, "logs"),
        "parser": "json-parser",
    },
]

LOGS_ROWS_PER_PAGE = 50

LOGS_PARSERS = {
    "json-parser": {
        "pattern": LOGS_PREDEFINED_REGEXES.json,
        # "pattern": r'\{\s*"level"\s*:\s*"([^"]+)"\s*,\s*"datetime"\s*:\s*"([^"]+)"\s*,\s*"source"\s*:\s*"([^"]+)"\s*,\s*"file"\s*:\s*"([^"]+)"\s*,\s*"message"\s*:\s*"([^"]+)"\s*\}',
        "column_names": ["Level", "Time", "Path", "File & Line No ", "Message"],
        "column_types": ["LEVEL", "TIME", "OTHER", "OTHER", "OTHER"],
    }
}

# SHOW_ERRORS_SINCE_LAST_LOG_IN = True
# LOGS_TIMEZONE = "Europe/Warsaw"
